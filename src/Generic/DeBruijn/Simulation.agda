-- Based on:
-- A Type and Scope Safe Universe of Syntaxes with Binding: Their Semantics and Proofs
-- (https://github.com/gallais/generic-syntax)
open import Data.Var hiding (_<$>_; z; s)
open import Data.Relation

module Generic.DeBruijn.Simulation {I : Set} {ùì•·¥¨ ùì•·¥Æ ùìí·¥¨ ùìí·¥Æ : I ‚îÄScoped} where

open import Data.List hiding ([_] ; lookup ; zip)
open import Function
open import Relation.Binary.PropositionalEquality hiding ([_])

open import Relation.Unary

open import Data.Var.Varlike
open import Data.Environment
open import Generic.Syntax
open import Generic.DeBruijn.Syntax

open import Generic.DeBruijn.Semantics as Sem hiding (body; semantics)
open import Generic.DeBruijn.Relator as Relator using (‚ü¶_‚üß·¥ø; lift·¥ø)

private
  variable
    Œì Œî : List I
    œÉ : I
    v·¥¨ : ùì•·¥¨ œÉ Œì
    v·¥Æ : ùì•·¥Æ œÉ Œì
    œÅ·¥¨ : (Œì ‚îÄEnv) ùì•·¥¨ Œî
    œÅ·¥Æ : (Œì ‚îÄEnv) ùì•·¥Æ Œî

module _ (ùì•·¥ø  : Rel ùì•·¥¨ ùì•·¥Æ) (ùìí·¥ø  : Rel ùìí·¥¨ ùìí·¥Æ) where

  reify·¥ø : {vl·¥¨ : VarLike ùì•·¥¨} {vl·¥Æ : VarLike ùì•·¥Æ} (vl·¥ø : VarLike·¥ø ùì•·¥ø vl·¥¨ vl·¥Æ) ‚Üí
           ‚àÄ Œî œÉ ‚Üí {k·¥¨ : Kripke ùì•·¥¨ ùìí·¥¨ Œî œÉ Œì} {k·¥Æ : Kripke ùì•·¥Æ ùìí·¥Æ Œî œÉ Œì} ‚Üí
           Kripke·¥ø ùì•·¥ø ùìí·¥ø Œî œÉ k·¥¨ k·¥Æ ‚Üí rel ùìí·¥ø œÉ (reify vl·¥¨ Œî œÉ k·¥¨) (reify vl·¥Æ Œî œÉ k·¥Æ)
  reify·¥ø vl·¥ø []         œÉ k·¥ø = k·¥ø
  reify·¥ø vl·¥ø Œî@(_ ‚à∑ _)  œÉ k·¥ø = k·¥ø (fresh ≥ vl^Var Œî) (VarLike·¥ø.freshÀ°·¥ø vl·¥ø _)

record Simulation (d : Desc I)
  (ùì¢·¥¨ : Semantics d ùì•·¥¨ ùìí·¥¨) (ùì¢·¥Æ : Semantics d ùì•·¥Æ ùìí·¥Æ)
  (ùì•·¥ø  : Rel ùì•·¥¨ ùì•·¥Æ) (ùìí·¥ø  : Rel ùìí·¥¨ ùìí·¥Æ) : Set where

  module ùì¢·¥¨ = Semantics ùì¢·¥¨
  module ùì¢·¥Æ = Semantics ùì¢·¥Æ
  field

    th·¥ø   :  (œÅ : Thinning Œì Œî) ‚Üí rel ùì•·¥ø œÉ v·¥¨ v·¥Æ ‚Üí rel ùì•·¥ø œÉ (ùì¢·¥¨.th^ùì• v·¥¨ œÅ) (ùì¢·¥Æ.th^ùì• v·¥Æ œÅ)

    var·¥ø  : rel ùì•·¥ø œÉ v·¥¨ v·¥Æ ‚Üí rel ùìí·¥ø œÉ (ùì¢·¥¨.var v·¥¨) (ùì¢·¥Æ.var v·¥Æ)

  body·¥ø : ‚ü¶ d ‚üß (Kripke ùì•·¥¨ ùìí·¥¨) œÉ Œî ‚Üí ‚ü¶ d ‚üß (Kripke ùì•·¥Æ ùìí·¥Æ) œÉ Œî ‚Üí Set
  body·¥ø v·¥¨ v·¥Æ = ‚ü¶ d ‚üß·¥ø (Kripke·¥ø ùì•·¥ø ùìí·¥ø) v·¥¨ v·¥Æ

  field

    alg·¥ø  : (b : ‚ü¶ d ‚üß (Scope (Tm d)) œÉ Œì) ‚Üí All ùì•·¥ø Œì œÅ·¥¨ œÅ·¥Æ ‚Üí
            let  v·¥¨ = fmap d (Sem.body ùì¢·¥¨ œÅ·¥¨) b
                 v·¥Æ = fmap d (Sem.body ùì¢·¥Æ œÅ·¥Æ) b
            in body·¥ø v·¥¨ v·¥Æ ‚Üí rel ùìí·¥ø œÉ (ùì¢·¥¨.alg v·¥¨) (ùì¢·¥Æ.alg v·¥Æ)

module _ {d : Desc I}
  {ùì¢·¥¨ : Semantics d ùì•·¥¨ ùìí·¥¨} {ùì¢·¥Æ : Semantics d ùì•·¥Æ ùìí·¥Æ}
  {ùì•·¥ø  : Rel ùì•·¥¨ ùì•·¥Æ} {ùìí·¥ø  : Rel ùìí·¥¨ ùìí·¥Æ}
  (sm : Simulation d ùì¢·¥¨ ùì¢·¥Æ ùì•·¥ø ùìí·¥ø) where
  open Simulation sm

  {-# TERMINATING #-}
  sim   : All ùì•·¥ø Œì œÅ·¥¨ œÅ·¥Æ ‚Üí (t : Tm d œÉ Œì) ‚Üí
          rel ùìí·¥ø œÉ (Sem.semantics ùì¢·¥¨ œÅ·¥¨ t) (Sem.semantics ùì¢·¥Æ œÅ·¥Æ t)
  body  : All ùì•·¥ø Œì œÅ·¥¨ œÅ·¥Æ ‚Üí ‚àÄ Œî j ‚Üí (t : Scope (Tm d) Œî j Œì) ‚Üí
          Kripke·¥ø ùì•·¥ø ùìí·¥ø Œî j (Sem.body ùì¢·¥¨ œÅ·¥¨ Œî j t) (Sem.body ùì¢·¥Æ œÅ·¥Æ Œî j t)

  sim œÅ·¥ø (`var k) = var·¥ø (lookup·¥ø œÅ·¥ø k)
  sim œÅ·¥ø (`con t) = alg·¥ø t œÅ·¥ø (lift·¥ø d (body œÅ·¥ø) t)

  body œÅ·¥ø []       i t = sim œÅ·¥ø t
  body œÅ·¥ø (_ ‚à∑ _)  i t = Œª œÉ vs·¥ø ‚Üí sim (vs·¥ø >>·¥ø (th·¥ø œÉ <$>·¥ø œÅ·¥ø)) t
