%if style == poly
%format forall = "\forall"
%format (Irrelevant (a)) = ".(" a ")"
%format (Exists (e) (t)) = "\Sigma[" e "\in" t "]"
%format e' = "\Varid{e}^{\prime}"
%format e1 = "\Varid{e}_1"
%format e2 = "\Varid{e}_2"
%format sigma = "\sigma"
%format tau = "\tau"
%format Delta = "\Delta"
%format Delta' = Delta "^{\prime}"
%format Delta1 = Delta "_{1}"
%format Delta2 = Delta "_{2}"
%format DeltaU = Delta "_{U}"
%format Gamma = "\Gamma"
%format Gamma' = Gamma "^{\prime}"
%format theta = "\theta"
%format theta' = theta "'^{\prime}"
%format theta1 = theta "_1"
%format theta2 = theta "_2"
%format phi = "\phi"
%format phi1 = phi "_1"
%format phi2 = phi "_2"
%format psi = "\psi"
%format psi1 = psi "_1"
%format psi2 = psi "_2"
%format injExpr1 = "\Varid{injExpr}_1"
%format injExpr2 = "\Varid{injExpr}_2"
%format _c=_ = "\_{\subseteq}\_"
%format c= = "\subseteq"
%format \/ = "\cup"
%format interpret_ = "\llbracket \_ \rrbracket"
%format (interpret (a)) = "\llbracket\ " a "\ \rrbracket"
%format floor_ = "\lfloor \_ \rfloor"
%format (floor (a)) = "\lfloor\ " a "\ \rfloor"
%format (dots (a)) = "\ldots"
%format (hide (a)) = " "
%format C= = "\sqsubseteq"
%format _C=_ = "\_{\sqsubseteq}\_"
%format o' = "\Varid{o}^{\prime}"
%format .. = "\fatsemi"
%format _.._ = "\_{\fatsemi}\_"
%format ++C= = ++ "_{\sqsubseteq}"
%format ^^ = "\Uparrow"
%format _^^_ = "\_{\Uparrow}\_"
%format _^_ = "\_{\uparrow}\_"
%format thin^^ = "\Varid{thin}{\Uparrow}"
%format map^^ = "\Varid{map}{\Uparrow}"
%format mult^^ = "\Varid{mult}{\Uparrow}"
%format ><R = "\times^R"
%format _><R_ = "\_{\times^R}\_"
%format ,R = ",^R"
%format _,R_ = "\_{,^R}\_"
%format |- = "\vdash"
%format _|-_ = "\_{\vdash}\_"
%format \\ = "\fatbslash"
%format _\\_ = "\_{\fatbslash}\_"
%format \\R = "\fatbslash^R"
%format _\\R_ = "\_{\fatbslash^R}\_"
%format map|- = "\Varid{map}{\vdash}"
%format pairR = "\Varid{pair}^R"
% TODO: we could make some operators more similar to the papers they come from.
% e.g. composition of OPEs (from stdmaryrd), _R insteaf of ^R
%endif
% We're not extracting Agda code yet, so there is no 'else' required.
