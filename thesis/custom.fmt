%if style == poly
%format forall = "\forall"
%format (Irrelevant (a)) = ".(" a ")"
%format (Exists (e) (t)) = "\Sigma[\ " e "\in" t "\ ]"
%format (At(x)(p)) = x "@(" p ")"
%format lambda = "\lambda"
%format _=>_ = "\_{\Rightarrow}\_"
%format e' = "\Varid{e}^{\prime}"
%format e1 = "\Varid{e}_1"
%format e2 = "\Varid{e}_2"
%format sigma = "\sigma"
%format tau = "\tau"
%format Delta = "\Delta"
%format Delta' = Delta "^{\prime}"
%format Delta1 = Delta "_{1}"
%format Delta2 = Delta "_{2}"
%format DeltaU = Delta "_{U}"
%format Gamma = "\Gamma"
%format Gamma' = Gamma "^{\prime}"
%format Gamma1 = Gamma "_1"
%format Gamma2 = Gamma "_2"
%format Gamma3 = Gamma "_3"
%format Gamma4 = Gamma "_4"
%format theta = "\theta"
%format theta' = theta "'^{\prime}"
%format theta1 = theta "_1"
%format theta2 = theta "_2"
%format phi = "\phi"
%format phi1 = phi "_1"
%format phi2 = phi "_2"
%format psi = "\psi"
%format psi1 = psi "_1"
%format psi2 = psi "_2"
%format (Forall (x)) = "\forall[\ " x "\ ]"
%format injExpr1 = "\Varid{injExpr}_1"
%format injExpr2 = "\Varid{injExpr}_2"
%format _c=_ = "\_{\subseteq}\_"
%format c= = "\subseteq"
%format \/ = "\cup"
% TODO: distinguish?
% interpretU : U -> Set
%format interpretU_ = "\llbracket \_ \rrbracket"
%format (interpretU (a)) = "\llbracket\ " a "\ \rrbracket"
% interpretD : Desc -> (List I -> I -Scoped) -> I -Scoped
%format interpretD_ = "\llbracket \_ \rrbracket"
%format (interpretD (a)) = "\llbracket\ " a "\ \rrbracket"
% interpretC : Desc -> (List I -> I -Scoped) -> I -Scoped  (for co-de-Bruijn)
%format interpretC_ = "\llbracket \_ \rrbracket"
%format (interpretC (a)) = "\llbracket\ " a "\ \rrbracket"
%format floor_ = "\lfloor \_ \rfloor"
%format (floor (a)) = "\lfloor\ " a "\ \rfloor"
%format (dots (a)) = "\ldots"
%format (hide (a)) = " "
%format C= = "\sqsubseteq"
%format _C=_ = "\_{\sqsubseteq}\_"
%format o' = "\Varid{o}^{\prime}"
%format .. = "\fatsemi"
%format _.._ = "\_{\fatsemi}\_"
%format law-..oi = "\Varid{law}-\fatsemi\Varid{oi}"
%format law-oi.. = "\Varid{law}-\Varid{oi}\fatsemi"
%format law-.... = "\Varid{law}-\fatsemi\fatsemi"
%format ++C= = ++ "_{\sqsubseteq}"
%format ^^ = "\Uparrow"
%format _^^_ = "\_{\Uparrow}\_"
%format _^_ = "\_{\uparrow}\_"
%format thin^^ = "\Varid{thin}{\Uparrow}"
%format map^^ = "\Varid{map}{\Uparrow}"
%format mult^^ = "\Varid{mult}{\Uparrow}"
%format >< = "\times"
%format ><R = "\times_R"
%format _><R_ = "\_{\times_R}\_"
%format ><R-trivial = "\times_R\Varid{-trivial}"
%format ,R = ",_R"
%format _,R_ = "\_{,_R}\_"
%format |- = "\vdash"
%format _|-_ = "\_{\vdash}\_"
%format \\ = "\fatbslash"
%format _\\_ = "\_{\fatbslash}\_"
%format \\R = "\fatbslash_R"
%format _\\R_ = "\_{\fatbslash_R}\_"
%format map|- = "\Varid{map}{\vdash}"
%format pairR = "\Varid{pair}_R"
%format \'sigma = "\Varid{`}\sigma"
%format \'# = "\Varid{`}\blacksquare"
%format \'X = "\Varid{`}X"
%format \'+ = "\Varid{`+}"
%format _\'+_ = "\_\Varid{`+}\_"
%endif
% We're not extracting Agda code yet, so there is no 'else' required.
